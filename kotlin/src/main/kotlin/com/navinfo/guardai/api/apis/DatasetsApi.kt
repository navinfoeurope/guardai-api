/**
 * GuardAI Platform API
 *
 * GuardAI is an adversarial security assessment Platform for AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@navinfo.eu
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.navinfo.guardai.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.navinfo.guardai.api.models.DataSet
import com.navinfo.guardai.api.models.DatasetRequest
import com.navinfo.guardai.api.models.DatasetTarget

import com.squareup.moshi.Json

import com.navinfo.guardai.api.infrastructure.ApiClient
import com.navinfo.guardai.api.infrastructure.ApiResponse
import com.navinfo.guardai.api.infrastructure.ClientException
import com.navinfo.guardai.api.infrastructure.ClientError
import com.navinfo.guardai.api.infrastructure.ServerException
import com.navinfo.guardai.api.infrastructure.ServerError
import com.navinfo.guardai.api.infrastructure.MultiValueMap
import com.navinfo.guardai.api.infrastructure.PartConfig
import com.navinfo.guardai.api.infrastructure.RequestConfig
import com.navinfo.guardai.api.infrastructure.RequestMethod
import com.navinfo.guardai.api.infrastructure.ResponseType
import com.navinfo.guardai.api.infrastructure.Success
import com.navinfo.guardai.api.infrastructure.toMultiValue

class DatasetsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8082")
        }
    }

    /**
     * Make a copy of a custom dataset. To copy to a different organization, extra permissions are required.
     * 
     * @param id The dataset ID.
     * @param orgId Optional organization ID to copy to. (optional)
     * @return DataSet
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun copyDataset(id: kotlin.Long, orgId: kotlin.Long? = null) : DataSet {
        val localVarResponse = copyDatasetWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSet
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make a copy of a custom dataset. To copy to a different organization, extra permissions are required.
     * 
     * @param id The dataset ID.
     * @param orgId Optional organization ID to copy to. (optional)
     * @return ApiResponse<DataSet?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun copyDatasetWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long?) : ApiResponse<DataSet?> {
        val localVariableConfig = copyDatasetRequestConfig(id = id, orgId = orgId)

        return request<Unit, DataSet>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation copyDataset
     *
     * @param id The dataset ID.
     * @param orgId Optional organization ID to copy to. (optional)
     * @return RequestConfig
     */
    fun copyDatasetRequestConfig(id: kotlin.Long, orgId: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orgId != null) {
                    put("orgId", listOf(orgId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/datasets/{id}/copy".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return kotlin.collections.List<DataSet>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteCustomDataset(id: kotlin.Long, orgId: kotlin.Long) : kotlin.collections.List<DataSet> {
        val localVarResponse = deleteCustomDatasetWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DataSet>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return ApiResponse<kotlin.collections.List<DataSet>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteCustomDatasetWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long) : ApiResponse<kotlin.collections.List<DataSet>?> {
        val localVariableConfig = deleteCustomDatasetRequestConfig(id = id, orgId = orgId)

        return request<Unit, kotlin.collections.List<DataSet>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteCustomDataset
     *
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return RequestConfig
     */
    fun deleteCustomDatasetRequestConfig(id: kotlin.Long, orgId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/datasets/{id}/{orgId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Download dataset data.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downloadDataset(id: kotlin.Long, orgId: kotlin.Long) : java.io.File {
        val localVarResponse = downloadDatasetWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Download dataset data.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downloadDatasetWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long) : ApiResponse<java.io.File?> {
        val localVariableConfig = downloadDatasetRequestConfig(id = id, orgId = orgId)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation downloadDataset
     *
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return RequestConfig
     */
    fun downloadDatasetRequestConfig(id: kotlin.Long, orgId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{id}/{orgId}/data".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return DataSet
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDataset(id: kotlin.Long, orgId: kotlin.Long) : DataSet {
        val localVarResponse = getDatasetWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSet
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return ApiResponse<DataSet?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDatasetWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long) : ApiResponse<DataSet?> {
        val localVariableConfig = getDatasetRequestConfig(id = id, orgId = orgId)

        return request<Unit, DataSet>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDataset
     *
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return RequestConfig
     */
    fun getDatasetRequestConfig(id: kotlin.Long, orgId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{id}/{orgId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve dataset classes (coco dataset supported).
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return kotlin.collections.List<kotlin.String>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDatasetClasses(id: kotlin.Long, orgId: kotlin.Long) : kotlin.collections.List<kotlin.String> {
        val localVarResponse = getDatasetClassesWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.String>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve dataset classes (coco dataset supported).
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return ApiResponse<kotlin.collections.List<kotlin.String>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDatasetClassesWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long) : ApiResponse<kotlin.collections.List<kotlin.String>?> {
        val localVariableConfig = getDatasetClassesRequestConfig(id = id, orgId = orgId)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDatasetClasses
     *
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @return RequestConfig
     */
    fun getDatasetClassesRequestConfig(id: kotlin.Long, orgId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{id}/{orgId}/classes".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get an item from the dataset.
     * 
     * @param id The dataset ID.
     * @param idx The item index.
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDatasetItem(id: kotlin.Long, idx: kotlin.Long) : java.io.File {
        val localVarResponse = getDatasetItemWithHttpInfo(id = id, idx = idx)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get an item from the dataset.
     * 
     * @param id The dataset ID.
     * @param idx The item index.
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDatasetItemWithHttpInfo(id: kotlin.Long, idx: kotlin.Long) : ApiResponse<java.io.File?> {
        val localVariableConfig = getDatasetItemRequestConfig(id = id, idx = idx)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDatasetItem
     *
     * @param id The dataset ID.
     * @param idx The item index.
     * @return RequestConfig
     */
    fun getDatasetItemRequestConfig(id: kotlin.Long, idx: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{id}/{idx}/item".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"idx"+"}", encodeURIComponent(idx.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a target from the dataset.
     * 
     * @param id The dataset ID.
     * @param idx The item index.
     * @return DatasetTarget
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDatasetTarget(id: kotlin.Long, idx: kotlin.Long) : DatasetTarget {
        val localVarResponse = getDatasetTargetWithHttpInfo(id = id, idx = idx)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DatasetTarget
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a target from the dataset.
     * 
     * @param id The dataset ID.
     * @param idx The item index.
     * @return ApiResponse<DatasetTarget?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDatasetTargetWithHttpInfo(id: kotlin.Long, idx: kotlin.Long) : ApiResponse<DatasetTarget?> {
        val localVariableConfig = getDatasetTargetRequestConfig(id = id, idx = idx)

        return request<Unit, DatasetTarget>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDatasetTarget
     *
     * @param id The dataset ID.
     * @param idx The item index.
     * @return RequestConfig
     */
    fun getDatasetTargetRequestConfig(id: kotlin.Long, idx: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{id}/{idx}/target".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"idx"+"}", encodeURIComponent(idx.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the datasets defined for this organization.
     * 
     * @param orgId The organization ID.
     * @return kotlin.collections.List<DataSet>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getDatasets(orgId: kotlin.Long) : kotlin.collections.List<DataSet> {
        val localVarResponse = getDatasetsWithHttpInfo(orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DataSet>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get the datasets defined for this organization.
     * 
     * @param orgId The organization ID.
     * @return ApiResponse<kotlin.collections.List<DataSet>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getDatasetsWithHttpInfo(orgId: kotlin.Long) : ApiResponse<kotlin.collections.List<DataSet>?> {
        val localVariableConfig = getDatasetsRequestConfig(orgId = orgId)

        return request<Unit, kotlin.collections.List<DataSet>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getDatasets
     *
     * @param orgId The organization ID.
     * @return RequestConfig
     */
    fun getDatasetsRequestConfig(orgId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/datasets/{orgId}".replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @param datasetRequest The dataset update request.
     * @return kotlin.collections.List<DataSet>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateCustomDataset(id: kotlin.Long, orgId: kotlin.Long, datasetRequest: DatasetRequest) : kotlin.collections.List<DataSet> {
        val localVarResponse = updateCustomDatasetWithHttpInfo(id = id, orgId = orgId, datasetRequest = datasetRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DataSet>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update dataset.
     * 
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @param datasetRequest The dataset update request.
     * @return ApiResponse<kotlin.collections.List<DataSet>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateCustomDatasetWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long, datasetRequest: DatasetRequest) : ApiResponse<kotlin.collections.List<DataSet>?> {
        val localVariableConfig = updateCustomDatasetRequestConfig(id = id, orgId = orgId, datasetRequest = datasetRequest)

        return request<DatasetRequest, kotlin.collections.List<DataSet>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateCustomDataset
     *
     * @param id The dataset ID.
     * @param orgId The organization ID.
     * @param datasetRequest The dataset update request.
     * @return RequestConfig
     */
    fun updateCustomDatasetRequestConfig(id: kotlin.Long, orgId: kotlin.Long, datasetRequest: DatasetRequest) : RequestConfig<DatasetRequest> {
        val localVariableBody = datasetRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/datasets/{id}/{orgId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Upload dataset.
     * 
     * @param orgId The organization ID.
     * @param description description
     * @param format format
     * @param name name
     * @param file  (optional)
     * @return kotlin.collections.List<DataSet>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadDataset(orgId: kotlin.Long, description: kotlin.String, format: kotlin.String, name: kotlin.String, file: java.io.File? = null) : kotlin.collections.List<DataSet> {
        val localVarResponse = uploadDatasetWithHttpInfo(orgId = orgId, description = description, format = format, name = name, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<DataSet>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload dataset.
     * 
     * @param orgId The organization ID.
     * @param description description
     * @param format format
     * @param name name
     * @param file  (optional)
     * @return ApiResponse<kotlin.collections.List<DataSet>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadDatasetWithHttpInfo(orgId: kotlin.Long, description: kotlin.String, format: kotlin.String, name: kotlin.String, file: java.io.File?) : ApiResponse<kotlin.collections.List<DataSet>?> {
        val localVariableConfig = uploadDatasetRequestConfig(orgId = orgId, description = description, format = format, name = name, file = file)

        return request<Map<String, PartConfig<*>>, kotlin.collections.List<DataSet>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadDataset
     *
     * @param orgId The organization ID.
     * @param description description
     * @param format format
     * @param name name
     * @param file  (optional)
     * @return RequestConfig
     */
    fun uploadDatasetRequestConfig(orgId: kotlin.Long, description: kotlin.String, format: kotlin.String, name: kotlin.String, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("description", listOf(description.toString()))
                put("format", listOf(format.toString()))
                put("name", listOf(name.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/datasets/{orgId}".replace("{"+"orgId"+"}", encodeURIComponent(orgId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Upload a file to the dataset and return a reference.
     * 
     * @param id The dataset ID.
     * @param type Upload type - i.e. &#39;transform&#39; for transform parameters
     * @param orgId The organization ID. (optional)
     * @param file  (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadDatasetFile(id: kotlin.Long, type: kotlin.String, orgId: kotlin.Long? = null, file: java.io.File? = null) : kotlin.String {
        val localVarResponse = uploadDatasetFileWithHttpInfo(id = id, type = type, orgId = orgId, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload a file to the dataset and return a reference.
     * 
     * @param id The dataset ID.
     * @param type Upload type - i.e. &#39;transform&#39; for transform parameters
     * @param orgId The organization ID. (optional)
     * @param file  (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadDatasetFileWithHttpInfo(id: kotlin.Long, type: kotlin.String, orgId: kotlin.Long?, file: java.io.File?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = uploadDatasetFileRequestConfig(id = id, type = type, orgId = orgId, file = file)

        return request<Map<String, PartConfig<*>>, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadDatasetFile
     *
     * @param id The dataset ID.
     * @param type Upload type - i.e. &#39;transform&#39; for transform parameters
     * @param orgId The organization ID. (optional)
     * @param file  (optional)
     * @return RequestConfig
     */
    fun uploadDatasetFileRequestConfig(id: kotlin.Long, type: kotlin.String, orgId: kotlin.Long?, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orgId != null) {
                    put("orgId", listOf(orgId.toString()))
                }
                put("type", listOf(type.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/datasets/{id}/file".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
