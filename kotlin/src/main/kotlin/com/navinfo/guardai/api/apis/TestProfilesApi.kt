/**
 * GuardAI Platform API
 *
 * GuardAI is an adversarial security assessment Platform for AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@navinfo.eu
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.navinfo.guardai.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.navinfo.guardai.api.models.DefenseRequest
import com.navinfo.guardai.api.models.FilterRequest
import com.navinfo.guardai.api.models.TestProfileRequest
import com.navinfo.guardai.api.models.TestProfileResponse

import com.squareup.moshi.Json

import com.navinfo.guardai.api.infrastructure.ApiClient
import com.navinfo.guardai.api.infrastructure.ApiResponse
import com.navinfo.guardai.api.infrastructure.ClientException
import com.navinfo.guardai.api.infrastructure.ClientError
import com.navinfo.guardai.api.infrastructure.ServerException
import com.navinfo.guardai.api.infrastructure.ServerError
import com.navinfo.guardai.api.infrastructure.MultiValueMap
import com.navinfo.guardai.api.infrastructure.PartConfig
import com.navinfo.guardai.api.infrastructure.RequestConfig
import com.navinfo.guardai.api.infrastructure.RequestMethod
import com.navinfo.guardai.api.infrastructure.ResponseType
import com.navinfo.guardai.api.infrastructure.Success
import com.navinfo.guardai.api.infrastructure.toMultiValue

class TestProfilesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8082")
        }
    }

    /**
     * Add a profile to an organization using the provided test id as a template.
     * 
     * @param testId The test ID from which the settings will be copied.
     * @param id The organization ID.
     * @param name The profile name.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addProfile(testId: kotlin.Long, id: kotlin.Long, name: kotlin.String) : TestProfileResponse {
        val localVarResponse = addProfileWithHttpInfo(testId = testId, id = id, name = name)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a profile to an organization using the provided test id as a template.
     * 
     * @param testId The test ID from which the settings will be copied.
     * @param id The organization ID.
     * @param name The profile name.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addProfileWithHttpInfo(testId: kotlin.Long, id: kotlin.Long, name: kotlin.String) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = addProfileRequestConfig(testId = testId, id = id, name = name)

        return request<Unit, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addProfile
     *
     * @param testId The test ID from which the settings will be copied.
     * @param id The organization ID.
     * @param name The profile name.
     * @return RequestConfig
     */
    fun addProfileRequestConfig(testId: kotlin.Long, id: kotlin.Long, name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                put("name", listOf(name.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/profiles/{testId}".replace("{"+"testId"+"}", encodeURIComponent(testId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Add a defense to the profile
     * 
     * @param id The profile ID.
     * @param defense The defense object
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addTestProfileDefense(id: kotlin.Long, defense: DefenseRequest) : TestProfileResponse {
        val localVarResponse = addTestProfileDefenseWithHttpInfo(id = id, defense = defense)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a defense to the profile
     * 
     * @param id The profile ID.
     * @param defense The defense object
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addTestProfileDefenseWithHttpInfo(id: kotlin.Long, defense: DefenseRequest) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = addTestProfileDefenseRequestConfig(id = id, defense = defense)

        return request<DefenseRequest, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addTestProfileDefense
     *
     * @param id The profile ID.
     * @param defense The defense object
     * @return RequestConfig
     */
    fun addTestProfileDefenseRequestConfig(id: kotlin.Long, defense: DefenseRequest) : RequestConfig<DefenseRequest> {
        val localVariableBody = defense
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/profiles/{id}/adddefense".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Add a filter to the profile
     * 
     * @param id The profile ID.
     * @param filter The filter to add.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addTestProfileFilter(id: kotlin.Long, filter: FilterRequest) : TestProfileResponse {
        val localVarResponse = addTestProfileFilterWithHttpInfo(id = id, filter = filter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a filter to the profile
     * 
     * @param id The profile ID.
     * @param filter The filter to add.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addTestProfileFilterWithHttpInfo(id: kotlin.Long, filter: FilterRequest) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = addTestProfileFilterRequestConfig(id = id, filter = filter)

        return request<FilterRequest, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addTestProfileFilter
     *
     * @param id The profile ID.
     * @param filter The filter to add.
     * @return RequestConfig
     */
    fun addTestProfileFilterRequestConfig(id: kotlin.Long, filter: FilterRequest) : RequestConfig<FilterRequest> {
        val localVariableBody = filter
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/profiles/{id}/addfilter".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Make a copy of a profile. To copy to a different organization, extra permissions are required.
     * 
     * @param id The profile ID.
     * @param orgId Optional destination organization ID to copy to. (optional)
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun copyProfile(id: kotlin.Long, orgId: kotlin.Long? = null) : TestProfileResponse {
        val localVarResponse = copyProfileWithHttpInfo(id = id, orgId = orgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make a copy of a profile. To copy to a different organization, extra permissions are required.
     * 
     * @param id The profile ID.
     * @param orgId Optional destination organization ID to copy to. (optional)
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun copyProfileWithHttpInfo(id: kotlin.Long, orgId: kotlin.Long?) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = copyProfileRequestConfig(id = id, orgId = orgId)

        return request<Unit, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation copyProfile
     *
     * @param id The profile ID.
     * @param orgId Optional destination organization ID to copy to. (optional)
     * @return RequestConfig
     */
    fun copyProfileRequestConfig(id: kotlin.Long, orgId: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orgId != null) {
                    put("orgId", listOf(orgId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/profiles/{id}/copy".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create a new test profile
     * 
     * @param orgId The organization ID.
     * @param profile The profile object.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createTestProfile(orgId: kotlin.Long, profile: TestProfileRequest) : TestProfileResponse {
        val localVarResponse = createTestProfileWithHttpInfo(orgId = orgId, profile = profile)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new test profile
     * 
     * @param orgId The organization ID.
     * @param profile The profile object.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createTestProfileWithHttpInfo(orgId: kotlin.Long, profile: TestProfileRequest) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = createTestProfileRequestConfig(orgId = orgId, profile = profile)

        return request<TestProfileRequest, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createTestProfile
     *
     * @param orgId The organization ID.
     * @param profile The profile object.
     * @return RequestConfig
     */
    fun createTestProfileRequestConfig(orgId: kotlin.Long, profile: TestProfileRequest) : RequestConfig<TestProfileRequest> {
        val localVariableBody = profile
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("orgId", listOf(orgId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/profiles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete a profile by ID.
     * 
     * @param id The profile ID.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteProfile(id: kotlin.Long) : Unit {
        val localVarResponse = deleteProfileWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a profile by ID.
     * 
     * @param id The profile ID.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProfileWithHttpInfo(id: kotlin.Long) : ApiResponse<Unit?> {
        val localVariableConfig = deleteProfileRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProfile
     *
     * @param id The profile ID.
     * @return RequestConfig
     */
    fun deleteProfileRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/profiles/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the test profile.
     * 
     * @param id The profile ID.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTestProfile(id: kotlin.Long) : TestProfileResponse {
        val localVarResponse = getTestProfileWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get the test profile.
     * 
     * @param id The profile ID.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTestProfileWithHttpInfo(id: kotlin.Long) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = getTestProfileRequestConfig(id = id)

        return request<Unit, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTestProfile
     *
     * @param id The profile ID.
     * @return RequestConfig
     */
    fun getTestProfileRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/profiles/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get the profiles available for this user.
     * 
     * @return kotlin.collections.List<TestProfileResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTestProfiles() : kotlin.collections.List<TestProfileResponse> {
        val localVarResponse = getTestProfilesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<TestProfileResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get the profiles available for this user.
     * 
     * @return ApiResponse<kotlin.collections.List<TestProfileResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTestProfilesWithHttpInfo() : ApiResponse<kotlin.collections.List<TestProfileResponse>?> {
        val localVariableConfig = getTestProfilesRequestConfig()

        return request<Unit, kotlin.collections.List<TestProfileResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTestProfiles
     *
     * @return RequestConfig
     */
    fun getTestProfilesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/profiles",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Remove defense from test profile.
     * 
     * @param defenseId The defense ID.
     * @param id The profile ID.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeTestProfileDefense(defenseId: kotlin.Long, id: kotlin.Long) : TestProfileResponse {
        val localVarResponse = removeTestProfileDefenseWithHttpInfo(defenseId = defenseId, id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove defense from test profile.
     * 
     * @param defenseId The defense ID.
     * @param id The profile ID.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeTestProfileDefenseWithHttpInfo(defenseId: kotlin.Long, id: kotlin.Long) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = removeTestProfileDefenseRequestConfig(defenseId = defenseId, id = id)

        return request<Unit, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeTestProfileDefense
     *
     * @param defenseId The defense ID.
     * @param id The profile ID.
     * @return RequestConfig
     */
    fun removeTestProfileDefenseRequestConfig(defenseId: kotlin.Long, id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/profiles/{id}/defense/{defenseId}".replace("{"+"defenseId"+"}", encodeURIComponent(defenseId.toString())).replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update profile by ID.
     * 
     * @param id The profile ID.
     * @param profile The profile update request.
     * @return TestProfileResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateTestProfile(id: kotlin.Long, profile: TestProfileRequest) : TestProfileResponse {
        val localVarResponse = updateTestProfileWithHttpInfo(id = id, profile = profile)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestProfileResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update profile by ID.
     * 
     * @param id The profile ID.
     * @param profile The profile update request.
     * @return ApiResponse<TestProfileResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateTestProfileWithHttpInfo(id: kotlin.Long, profile: TestProfileRequest) : ApiResponse<TestProfileResponse?> {
        val localVariableConfig = updateTestProfileRequestConfig(id = id, profile = profile)

        return request<TestProfileRequest, TestProfileResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateTestProfile
     *
     * @param id The profile ID.
     * @param profile The profile update request.
     * @return RequestConfig
     */
    fun updateTestProfileRequestConfig(id: kotlin.Long, profile: TestProfileRequest) : RequestConfig<TestProfileRequest> {
        val localVariableBody = profile
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/profiles/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
