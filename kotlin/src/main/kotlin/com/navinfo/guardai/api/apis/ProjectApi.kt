/**
 * GuardAI Platform API
 *
 * GuardAI is an adversarial security assessment Platform for AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: info@navinfo.eu
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.navinfo.guardai.api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.navinfo.guardai.api.models.ModelRequest
import com.navinfo.guardai.api.models.ProjectRequest
import com.navinfo.guardai.api.models.ProjectResponse

import com.squareup.moshi.Json

import com.navinfo.guardai.api.infrastructure.ApiClient
import com.navinfo.guardai.api.infrastructure.ApiResponse
import com.navinfo.guardai.api.infrastructure.ClientException
import com.navinfo.guardai.api.infrastructure.ClientError
import com.navinfo.guardai.api.infrastructure.ServerException
import com.navinfo.guardai.api.infrastructure.ServerError
import com.navinfo.guardai.api.infrastructure.MultiValueMap
import com.navinfo.guardai.api.infrastructure.PartConfig
import com.navinfo.guardai.api.infrastructure.RequestConfig
import com.navinfo.guardai.api.infrastructure.RequestMethod
import com.navinfo.guardai.api.infrastructure.ResponseType
import com.navinfo.guardai.api.infrastructure.Success
import com.navinfo.guardai.api.infrastructure.toMultiValue

class ProjectApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8082")
        }
    }

    /**
     * Add a project to an organization.
     * 
     * @param organizationId The organization ID.
     * @param project project
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addProject(organizationId: kotlin.Long, project: ProjectRequest) : ProjectResponse {
        val localVarResponse = addProjectWithHttpInfo(organizationId = organizationId, project = project)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a project to an organization.
     * 
     * @param organizationId The organization ID.
     * @param project project
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addProjectWithHttpInfo(organizationId: kotlin.Long, project: ProjectRequest) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = addProjectRequestConfig(organizationId = organizationId, project = project)

        return request<ProjectRequest, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addProject
     *
     * @param organizationId The organization ID.
     * @param project project
     * @return RequestConfig
     */
    fun addProjectRequestConfig(organizationId: kotlin.Long, project: ProjectRequest) : RequestConfig<ProjectRequest> {
        val localVariableBody = project
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("organizationId", listOf(organizationId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Make a copy of the project available to (optionally) another organization.
     * 
     * @param id The project ID.
     * @param newProject Optional new project information.
     * @param destOrgId The optional destination organization id. (optional)
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun copyProject(id: kotlin.Long, newProject: ProjectRequest, destOrgId: kotlin.Long? = null) : ProjectResponse {
        val localVarResponse = copyProjectWithHttpInfo(id = id, newProject = newProject, destOrgId = destOrgId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make a copy of the project available to (optionally) another organization.
     * 
     * @param id The project ID.
     * @param newProject Optional new project information.
     * @param destOrgId The optional destination organization id. (optional)
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun copyProjectWithHttpInfo(id: kotlin.Long, newProject: ProjectRequest, destOrgId: kotlin.Long?) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = copyProjectRequestConfig(id = id, newProject = newProject, destOrgId = destOrgId)

        return request<ProjectRequest, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation copyProject
     *
     * @param id The project ID.
     * @param newProject Optional new project information.
     * @param destOrgId The optional destination organization id. (optional)
     * @return RequestConfig
     */
    fun copyProjectRequestConfig(id: kotlin.Long, newProject: ProjectRequest, destOrgId: kotlin.Long?) : RequestConfig<ProjectRequest> {
        val localVariableBody = newProject
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (destOrgId != null) {
                    put("destOrgId", listOf(destOrgId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/projects/{id}/copy".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Make a copy of the project model available to the organization.
     * 
     * @param id The project ID.
     * @param model New model information.
     * @param destModelId The optional destination model id. (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun copyProjectModel(id: kotlin.Long, model: ModelRequest, destModelId: kotlin.Long? = null) : Unit {
        val localVarResponse = copyProjectModelWithHttpInfo(id = id, model = model, destModelId = destModelId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make a copy of the project model available to the organization.
     * 
     * @param id The project ID.
     * @param model New model information.
     * @param destModelId The optional destination model id. (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun copyProjectModelWithHttpInfo(id: kotlin.Long, model: ModelRequest, destModelId: kotlin.Long?) : ApiResponse<Unit?> {
        val localVariableConfig = copyProjectModelRequestConfig(id = id, model = model, destModelId = destModelId)

        return request<ModelRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation copyProjectModel
     *
     * @param id The project ID.
     * @param model New model information.
     * @param destModelId The optional destination model id. (optional)
     * @return RequestConfig
     */
    fun copyProjectModelRequestConfig(id: kotlin.Long, model: ModelRequest, destModelId: kotlin.Long?) : RequestConfig<ModelRequest> {
        val localVariableBody = model
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (destModelId != null) {
                    put("destModelId", listOf(destModelId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/projects/{id}/copymodel".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter dataType
     */
     enum class DataType_deleteData(val value: kotlin.String) {
         @Json(name = "Model") model("Model"),
         @Json(name = "WrapperScript") wrapperScript("WrapperScript")
     }

    /**
     * Delete project model data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteData(id: kotlin.Long, dataType: DataType_deleteData) : ProjectResponse {
        val localVarResponse = deleteDataWithHttpInfo(id = id, dataType = dataType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete project model data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteDataWithHttpInfo(id: kotlin.Long, dataType: DataType_deleteData) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = deleteDataRequestConfig(id = id, dataType = dataType)

        return request<Unit, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteData
     *
     * @param id The project ID.
     * @param dataType dataType
     * @return RequestConfig
     */
    fun deleteDataRequestConfig(id: kotlin.Long, dataType: DataType_deleteData) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("dataType", listOf(dataType.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/projects/{id}/modeldata".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete a project.
     * 
     * @param id The project ID.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteProject(id: kotlin.Long) : Unit {
        val localVarResponse = deleteProjectWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a project.
     * 
     * @param id The project ID.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteProjectWithHttpInfo(id: kotlin.Long) : ApiResponse<Unit?> {
        val localVariableConfig = deleteProjectRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteProject
     *
     * @param id The project ID.
     * @return RequestConfig
     */
    fun deleteProjectRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/projects/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter dataType
     */
     enum class DataType_downloadProjectData(val value: kotlin.String) {
         @Json(name = "Model") model("Model"),
         @Json(name = "WrapperScript") wrapperScript("WrapperScript")
     }

    /**
     * Download project data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun downloadProjectData(id: kotlin.Long, dataType: DataType_downloadProjectData) : java.io.File {
        val localVarResponse = downloadProjectDataWithHttpInfo(id = id, dataType = dataType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Download project data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun downloadProjectDataWithHttpInfo(id: kotlin.Long, dataType: DataType_downloadProjectData) : ApiResponse<java.io.File?> {
        val localVariableConfig = downloadProjectDataRequestConfig(id = id, dataType = dataType)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation downloadProjectData
     *
     * @param id The project ID.
     * @param dataType dataType
     * @return RequestConfig
     */
    fun downloadProjectDataRequestConfig(id: kotlin.Long, dataType: DataType_downloadProjectData) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("dataType", listOf(dataType.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/projects/{id}/data".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a project.
     * 
     * @param id The project ID.
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProject(id: kotlin.Long) : ProjectResponse {
        val localVarResponse = getProjectWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a project.
     * 
     * @param id The project ID.
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectWithHttpInfo(id: kotlin.Long) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = getProjectRequestConfig(id = id)

        return request<Unit, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProject
     *
     * @param id The project ID.
     * @return RequestConfig
     */
    fun getProjectRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/projects/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get list of projects.
     * 
     * @param organizationId The optional organization ID. (optional)
     * @return kotlin.collections.List<ProjectResponse>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProjects(organizationId: kotlin.Long? = null) : kotlin.collections.List<ProjectResponse> {
        val localVarResponse = getProjectsWithHttpInfo(organizationId = organizationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ProjectResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get list of projects.
     * 
     * @param organizationId The optional organization ID. (optional)
     * @return ApiResponse<kotlin.collections.List<ProjectResponse>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProjectsWithHttpInfo(organizationId: kotlin.Long?) : ApiResponse<kotlin.collections.List<ProjectResponse>?> {
        val localVariableConfig = getProjectsRequestConfig(organizationId = organizationId)

        return request<Unit, kotlin.collections.List<ProjectResponse>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProjects
     *
     * @param organizationId The optional organization ID. (optional)
     * @return RequestConfig
     */
    fun getProjectsRequestConfig(organizationId: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (organizationId != null) {
                    put("organizationId", listOf(organizationId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update project .
     * 
     * @param id The project ID.
     * @param projectRequest projectRequest
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateProject(id: kotlin.Long, projectRequest: ProjectRequest) : ProjectResponse {
        val localVarResponse = updateProjectWithHttpInfo(id = id, projectRequest = projectRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update project .
     * 
     * @param id The project ID.
     * @param projectRequest projectRequest
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateProjectWithHttpInfo(id: kotlin.Long, projectRequest: ProjectRequest) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = updateProjectRequestConfig(id = id, projectRequest = projectRequest)

        return request<ProjectRequest, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateProject
     *
     * @param id The project ID.
     * @param projectRequest projectRequest
     * @return RequestConfig
     */
    fun updateProjectRequestConfig(id: kotlin.Long, projectRequest: ProjectRequest) : RequestConfig<ProjectRequest> {
        val localVariableBody = projectRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/projects/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter dataType
     */
     enum class DataType_uploadProjectData(val value: kotlin.String) {
         @Json(name = "Model") model("Model"),
         @Json(name = "WrapperScript") wrapperScript("WrapperScript")
     }

    /**
     * Upload project data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @param file  (optional)
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadProjectData(id: kotlin.Long, dataType: DataType_uploadProjectData, file: java.io.File? = null) : ProjectResponse {
        val localVarResponse = uploadProjectDataWithHttpInfo(id = id, dataType = dataType, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload project data.
     * 
     * @param id The project ID.
     * @param dataType dataType
     * @param file  (optional)
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadProjectDataWithHttpInfo(id: kotlin.Long, dataType: DataType_uploadProjectData, file: java.io.File?) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = uploadProjectDataRequestConfig(id = id, dataType = dataType, file = file)

        return request<Map<String, PartConfig<*>>, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadProjectData
     *
     * @param id The project ID.
     * @param dataType dataType
     * @param file  (optional)
     * @return RequestConfig
     */
    fun uploadProjectDataRequestConfig(id: kotlin.Long, dataType: DataType_uploadProjectData, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("dataType", listOf(dataType.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/projects/{id}/modeldata".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Upload a file to the project and return a reference.
     * 
     * @param id The project ID.
     * @param type Upload type - &#39;transform&#39; for transform parameters
     * @param file  (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadProjectFile(id: kotlin.Long, type: kotlin.String, file: java.io.File? = null) : kotlin.String {
        val localVarResponse = uploadProjectFileWithHttpInfo(id = id, type = type, file = file)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload a file to the project and return a reference.
     * 
     * @param id The project ID.
     * @param type Upload type - &#39;transform&#39; for transform parameters
     * @param file  (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadProjectFileWithHttpInfo(id: kotlin.Long, type: kotlin.String, file: java.io.File?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = uploadProjectFileRequestConfig(id = id, type = type, file = file)

        return request<Map<String, PartConfig<*>>, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadProjectFile
     *
     * @param id The project ID.
     * @param type Upload type - &#39;transform&#39; for transform parameters
     * @param file  (optional)
     * @return RequestConfig
     */
    fun uploadProjectFileRequestConfig(id: kotlin.Long, type: kotlin.String, file: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("type", listOf(type.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/projects/{id}/files".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Use an existing model to configure the project.
     * 
     * @param id The project ID.
     * @param modelId The model ID.
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun useModel(id: kotlin.Long, modelId: kotlin.Long) : ProjectResponse {
        val localVarResponse = useModelWithHttpInfo(id = id, modelId = modelId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Use an existing model to configure the project.
     * 
     * @param id The project ID.
     * @param modelId The model ID.
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun useModelWithHttpInfo(id: kotlin.Long, modelId: kotlin.Long) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = useModelRequestConfig(id = id, modelId = modelId)

        return request<Unit, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation useModel
     *
     * @param id The project ID.
     * @param modelId The model ID.
     * @return RequestConfig
     */
    fun useModelRequestConfig(id: kotlin.Long, modelId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("modelId", listOf(modelId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/projects/{id}/usemodel".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Start the model verification process.
     * 
     * @param id The project ID.
     * @return ProjectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun verifyProject(id: kotlin.Long) : ProjectResponse {
        val localVarResponse = verifyProjectWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProjectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start the model verification process.
     * 
     * @param id The project ID.
     * @return ApiResponse<ProjectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun verifyProjectWithHttpInfo(id: kotlin.Long) : ApiResponse<ProjectResponse?> {
        val localVariableConfig = verifyProjectRequestConfig(id = id)

        return request<Unit, ProjectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation verifyProject
     *
     * @param id The project ID.
     * @return RequestConfig
     */
    fun verifyProjectRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/projects/{id}/verify".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
